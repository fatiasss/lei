// ViewModel KnockOut
var vm = function () {
    console.log('ViewModel initiated...');
    //--- Variáveis locais
    var self = this;
    self.baseUri = ko.observable('http://192.168.160.58/Paris2024/api/Torch_route');
    self.displayName = 'Paris 2024 Torch Route';
    self.locations = ko.observableArray([]); 
    var currentLocationIndex = 0
    self.prevCoords = null

    //--- Page Events
    self.activate = function (id) {
        console.log('CALL: getRoutes...');
        var composedUri = self.baseUri();
        ajaxHelper(composedUri, 'GET').done(function (data) {
            console.log(data)
            self.locations(data)
            globe.htmlElementsData(addPins(data, self));
        });
    };
    self.nextmark = function () {
        const locations = self.locations();
        if (!locations || locations.length === 0) {
            console.error("No locations");
            return;
        }
        const locationprev = locations[currentLocationIndex-1];
        const location = locations[currentLocationIndex];
        let locationnext = locations[currentLocationIndex + 1];
        if (locationnext.Lat == null || locationnext.Lon == null) {
            locationnext = locations[currentLocationIndex + 2];
        }
        if (!location || location.Lat == null || location.Lon == null) {
            console.error("Invalid location.");
            if (currentLocationIndex == 0) {
                console.log("Skip the first arc")
            }
            else {
                self.prevCoords = locationprev && locationprev.Lat != null && locationprev.Lon != null
                    ? { lat: locationprev.Lat, lng: locationprev.Lon }
                    : { lat: location.Lat, lng: location.Lon };
                emitArc({ lat: location.Lat, lng: location.Lon }, self); //emit the arc only if it isn't the first stop
            }
            globe.pointOfView({
                lat: parseFloat(locationnext.Lat),
                lng: parseFloat(locationnext.Lon),
                altitude: 0.3,
            }, 1000);
            currentLocationIndex = (currentLocationIndex + 1) % locations.length;
            globe.controls().autoRotate = false;
            return;
        }
        if (currentLocationIndex == 0) {
            console.log("Skip the first arc")
        }
        else {
            self.prevCoords = locationprev && locationprev.Lat != null && locationprev.Lon != null
                ? { lat: locationprev.Lat, lng: locationprev.Lon }
                : { lat: location.Lat, lng: location.Lon };
            emitArc({ lat: location.Lat, lng: location.Lon }, self); //emit the arc only if it isn't the first stop
        }
        globe.pointOfView({
            lat: parseFloat(location.Lat),
            lng: parseFloat(location.Lon),
            altitude: 0.3,
        }, 1000);
        console.log(location.Lat, location.Lon)

        locations.forEach(loc => { //clear all the labels so they dont keep stacking
            if (loc.labelDiv) {
                loc.labelDiv.style.display = 'none';
            }
        });

        if (location.labelDiv) {
            location.labelDiv.style.display = 'block';
        }

        console.log(`Zooming ${currentLocationIndex + 1} of ${locations.length}`);

        currentLocationIndex = (currentLocationIndex + 1) % locations.length;
        globe.controls().autoRotate = false;
    };

    //--- Start ....
    self.activate(1);
    console.log("VM initialized!");
}

//--- Internal functions
function ajaxHelper(uri, method, data) {
    return $.ajax({
        type: method,
        url: uri,
        dataType: 'json',
        contentType: 'application/json',
        data: data ? JSON.stringify(data) : null,
        error: function (jqXHR, textStatus, errorThrown) {
            alert("AJAX Call[" + uri + "] Fail...");
        }
    });
}
function addPins(locations, self) {
    const markerSvg = `<svg viewBox="-4 0 36 36">
        <path fill="currentColor" d="M14,0 C21.732,0 28,5.641 28,12.6 C28,23.963 14,36 14,36 C14,36 0,24.064 0,12.6 C0,5.641 6.268,0 14,0 Z"></path>
        <circle fill="black" cx="14" cy="14" r="7"></circle>
    </svg>`;

    return locations.map(location => {
        const el = document.createElement('div');
        el.innerHTML = markerSvg;
        el.style.color = ['red', 'white', 'blue', 'green'][Math.round(Math.random() * 3)];
        el.style.width = `15px`;
        el.style['pointer-events'] = 'auto';
        el.style.cursor = 'pointer';

        const labelDiv = document.createElement('div');
        labelDiv.innerHTML = ` 
            <div>
                <span>${location.Title || 'No Title'}</span><br>
                <span>Stage Number: ${location.Stage_number || 'No Stage Number'}</span><br>
                <a href="${location.Url || '#'}" target="_blank" style="color: blue; text-decoration: underline;">
                    More Info
                </a>
            </div>`; //tive que passar tudo para o innerhtml se nao dá overwrite cada vez


        labelDiv.style.position = 'absolute';
        labelDiv.style.background = 'white';
        labelDiv.style.padding = '2px 5px';
        labelDiv.style.border = '1px solid black';
        labelDiv.style.borderRadius = '3px';
        labelDiv.style.fontSize = '12px';
        labelDiv.style.color = "black";
        labelDiv.style.whiteSpace = 'nowrap';
        labelDiv.style.transform = 'translate(-50%, -150%)'; //so it's above the marker
        labelDiv.style.display = 'none'
        labelDiv.style.zIndex = 1000; 
        labelDiv.style.pointerEvents = 'auto';  


        const container = document.createElement('div'); //se meter um de cada vez aquilo da overwrite
        container.appendChild(el);
        container.appendChild(labelDiv);

        el.onclick = (event) => {
            const locations = self.locations(); 
            locations.forEach(loc => { //clear all the labels so they dont keep stacking
                if (loc.labelDiv) {
                    loc.labelDiv.style.display = 'none';
                }
            });
            console.log("before the move")
            globe.pointOfView({ //zoom to the clicked marker
                lat: parseFloat(location.Lat),
                lng: parseFloat(location.Lon),
                altitude: 0.3,
            }, 1000);
            globe.controls().autoRotate = false;
            console.log("after the move")
            console.log(location.Lat, location.Lon)

            if (location.labelDiv) { //show the label
                location.labelDiv.style.display = 'block';
                console.log("changing label")
            }
        };
        location.labelDiv = labelDiv; //para depois o chamar no zoom

        return {
            lat: parseFloat(location.Lat),
            lng: parseFloat(location.Lon),
            element: container,

        };
    });
}
function emitArc({ lat: endLat, lng: endLng }) {
    const ARC_REL_LEN = 0.4; // relative to whole arc
    const FLIGHT_TIME = 1000;
    const NUM_RINGS = 3;
    const RINGS_MAX_R = 5; // deg
    const RING_PROPAGATION_SPEED = 5; // deg/sec
    let prevCoords = self.prevCoords || { lat: 0, lng: 0 };
    const { lat: startLat, lng: startLng } = prevCoords;
    setTimeout(() => { prevCoords = { lat: endLat, lng: endLng } }, FLIGHT_TIME);

    // add and remove arc after 1 cycle
    const arc = { startLat, startLng, endLat, endLng };
    globe.arcsData([...globe.arcsData(), arc]);
    setTimeout(() => globe.arcsData(globe.arcsData().filter(d => d !== arc)), FLIGHT_TIME * 2);

    // add and remove start rings
    const srcRing = { lat: startLat, lng: startLng };
    globe.ringsData([...globe.ringsData(), srcRing]);
    setTimeout(() => globe.ringsData(globe.ringsData().filter(r => r !== srcRing)), FLIGHT_TIME * ARC_REL_LEN);

    // add and remove target rings
    setTimeout(() => {
        const targetRing = { lat: endLat, lng: endLng };
        globe.ringsData([...globe.ringsData(), targetRing]);
        setTimeout(() => globe.ringsData(globe.ringsData().filter(r => r !== targetRing)), FLIGHT_TIME * ARC_REL_LEN);
    }, FLIGHT_TIME);
    setTimeout(() => {
        self.prevCoords = { lat: endLat, lng: endLng }
    });
}
function displayLocation(location) {


}
    $(document).ready(function () {
        console.log("Document is ready!");
        markers = [];
        const globeElement = document.getElementById('globe');
        const ARC_REL_LEN = 0.4; // relative to whole arc
        const FLIGHT_TIME = 1000;
        const NUM_RINGS = 3;
        const RINGS_MAX_R = 5; // deg
        const RING_PROPAGATION_SPEED = 5; // deg/sec
        if (!globeElement) {
            console.error('Globe element not found');
            return;
        }
        globe = new Globe(globeElement)
            .globeImageUrl('https://unpkg.com/three-globe/example/img/earth-blue-marble.jpg')
            .bumpImageUrl('https://unpkg.com/three-globe/example/img/earth-topology.png')
            .htmlElement(d => d.element)
            .arcColor(() => 'darkOrange')
            .arcDashLength(ARC_REL_LEN)
            .arcDashGap(2)
            .arcDashInitialGap(1)
            .arcDashAnimateTime(FLIGHT_TIME)
            .arcsTransitionDuration(0)
            .ringColor(() => t => `rgba(255,100,50,${1 - t})`)
            .ringMaxRadius(RINGS_MAX_R)
            .ringPropagationSpeed(RING_PROPAGATION_SPEED)
            .ringRepeatPeriod(FLIGHT_TIME * ARC_REL_LEN / NUM_RINGS);

        globe.controls().autoRotate = true;
        globe.controls().autoRotateSpeed = 0.3;
        globe.pointOfView({ lat: 45.1909365, lng: 0.7184407, altitude: 0.5 });

        

        ko.applyBindings(new vm());
    });

